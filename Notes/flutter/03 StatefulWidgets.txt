//////////////////////////
/// StatefulWidgets (2024-06-25)
//////////////////////////
NOTES:

    // Required code. 

        class CurConPage extends StatefulWidget {
        const CurConPage({super.key});
        @override
        State<CurConPage> createState() => _CurConPageState();
        }

        class _CurConPageState extends State<CurConPage> {
        int count = 5;
        @override
        Widget build(BuildContext context) {
            return const Scaffold();
        }
        }

    // before build function gets called , you want some data to come form an api so , you use initState()
    // gets executed before the build function. 

        class _CurConPageState extends State<CurConPage> {
        late int count; // variable that will get ini after some time. 

        @override
        void initState() {
            super.initState();
        }

        @override
        Widget build(BuildContext context) {


    // final code: 

        import 'package:flutter/foundation.dart';
        import 'package:flutter/material.dart';

        class CurConPage extends StatefulWidget {
        const CurConPage({super.key});
        @override
        State<CurConPage> createState() {
            return _CurConPageState();
        }
        }

        class _CurConPageState extends State<CurConPage> {
        @override
        void initState() {
            super.initState();
        }

        double result = 0;
        final TextEditingController control = TextEditingController();

        @override // run on every frame. if phone refresh rate = 60Hz , it will rebuld
        Widget build(BuildContext context) {
            return Scaffold(
            appBar: AppBar(
                backgroundColor: Colors.white,
                elevation: 0,
                title: const Text("Currency Converter"),
                centerTitle: true,
            ),
            backgroundColor: const Color.fromARGB(255, 255, 255, 255),
            body: Center(
                child: Column(
                mainAxisSize: MainAxisSize.max,
                crossAxisAlignment: CrossAxisAlignment.center,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                    Text(
                    result.toString(),
                    style: const TextStyle(
                        fontSize: 45,
                        fontWeight: FontWeight.bold,
                        color: Color.fromARGB(255, 0, 0, 0)),
                    ),
                    Container(
                    padding: const EdgeInsets.only(
                        left: 35, right: 35, top: 25, bottom: 25),
                    child: TextField(
                        controller: control,
                        keyboardType: const TextInputType.numberWithOptions(
                        decimal: true,
                        signed: true,
                        ),
                        style: const TextStyle(
                        fontSize: 25,
                        color: Colors.black,
                        ),
                        decoration: const InputDecoration(
                        focusedBorder: OutlineInputBorder(
                            borderSide: BorderSide(
                                style: BorderStyle.solid,
                                width: 3.0,
                                color: Color.fromARGB(255, 160, 244, 238)),
                            borderRadius: BorderRadius.all(
                            Radius.circular(35),
                            ), //11:24:44
                        ),
                        filled: true,
                        fillColor: Color.fromARGB(255, 255, 255, 255),
                        hintText: "Enter ",
                        hintStyle: TextStyle(color: Colors.black),
                        prefixIcon: Icon(
                            Icons.monetization_on,
                            color: Colors.black,
                            size: 25,
                        ),
                        ),
                    ),
                    ),
                    TextButton(
                    style: const ButtonStyle(
                        // shape: WidgetStatePropertyAll(CircleBorder()),
                        fixedSize: WidgetStatePropertyAll(Size(200, 50)),
                        foregroundColor:
                            WidgetStatePropertyAll(Color.fromARGB(255, 255, 255, 255)),
                        backgroundColor:
                            WidgetStatePropertyAll(Color.fromARGB(255, 160, 244, 238)),
                    ),
                    onPressed: () {
                        if (kDebugMode) {
                        setState(() {
                            result = double.parse(control.text) * 81;
                        });
                        }
                    },
                    child: const Text(
                        "Convert",
                        style: TextStyle(
                        fontSize: 25,
                        fontWeight: FontWeight.bold,
                        ),
                    ),
                    ),
                ],
                ),
            ),
            );
        }
        }


//////////////////////////
/// SizedBox (2024-06-25)
//////////////////////////
NOTES:

// To add spaces between the elements. 
// we are using this because Container() cannot be const and it will be rebuild again and again , so we use const SizedBox() so that it dosnt get rebuild again and again. 

const SizedBox(height:10)

